akka-kadmin {
  # Perform a best effort deduplication.
  #
  # The code ASSUMES there is only ONE kadmin actor interacting with kerberos.
  #
  # By best effort we mean that there is still a very small window in which duplication can still occur.
  # To understand it, we must first explain how the code operates:
  # The kadmin actor knows the last deliveryId it handled for a given sender.
  # When a new message arrives it will check its deliveryId against the expectedId (last deliveryId + 1) of that sender.
  #  If (deliveryId > expectedId) then
  #    The message is a future one and there are unprocessed messages in between, so the actor will ignore it.
  #  If (deliveryId < expectedId) then
  #    The message is a resend, the actor will just respond with its result.
  #    This result was stored when the message side-effect was performed.
  #    This means we won't perform the side-effect twice since we just send the previously computed result.
  #  If (deliveryId == expectedId) then
  #    This is the message we are expecting, so we will perform the side-effect the following way:
  #      1) store IN MEMORY that we started performing the side-effect.
  #      2) perform the side-effect.
  #      3) persist the side-effect result, and then in the persist handler update the actor internal state
  #         with the result (this allows us to send the result when we get a resend).
  #
  # If the actor crashes:
  #  · after performing the side-effect
  #  · but before persisting its result
  # duplication will occur. Since in the recovery the actor won't know that it already performed the side-effect.
  # This is also true if we persisted that we started executing the side-effect.
  # For most operations this won't be a problem because they are idempotent. However for ChangePassword and
  # concequently AddPrincipal (since ChangePassword might be invoked inside AddPrincipal) this might be a problem
  # because these operations might not be idempotent in some cases.
  #
  # Setting this to true implies that the kadmin actor will create a persistent actor.
  # Which means you have to configure the journal for it.


  # How long to wait to actually perform the remove.
  # It is useful to perform the remove at a later time to deal with delayed messages.
  # If set to 0 then the remove will be performed instantaneously
  remove-delay = 15 minutes

  # Every X messages a snapshot will be saved. Set to 0 to disable snapshots.
  # This value is not a strict one because the kadmin actor will not persist it.
  # If 190 messages were already processed and then the actor crashs only after
  # another 200 messages will the actor save a snapshot.
  # Repeated and future messages will not count. Or, in other words, only messages where the deliveryId
  # is equal to the expectedId will increase the counter.
  save-snapshot-every-X-messages = 200

  # Akka-kadmin will use as settings for kadmin library those defined:
  # 1) Here, directly under the path akka-kadmin (these have precedence over the next ones).
  # 2) On the same level as akka-kadmin.
}